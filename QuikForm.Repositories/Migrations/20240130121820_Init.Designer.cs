// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuikForm.Repositories.Contexts;

#nullable disable

namespace QuikForm.Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240130121820_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuikForm.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("QuikForm.Entities.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Et.",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 2,
                            Label = "Exercitationem.",
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 3,
                            Label = "Accusamus.",
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 4,
                            Label = "Quasi.",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 5,
                            Label = "Vel.",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 6,
                            Label = "Quia.",
                            QuestionId = 19
                        },
                        new
                        {
                            Id = 7,
                            Label = "Nihil.",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 8,
                            Label = "Est.",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 9,
                            Label = "Dicta.",
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 10,
                            Label = "Voluptatum.",
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 11,
                            Label = "Aut.",
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 12,
                            Label = "Non.",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 13,
                            Label = "Hic.",
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 14,
                            Label = "In.",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 15,
                            Label = "Eos.",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 16,
                            Label = "Laborum.",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 17,
                            Label = "Dolores.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 18,
                            Label = "Ut.",
                            QuestionId = 15
                        },
                        new
                        {
                            Id = 19,
                            Label = "Cupiditate.",
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 20,
                            Label = "Aperiam.",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 21,
                            Label = "Porro.",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 22,
                            Label = "Recusandae.",
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 23,
                            Label = "Tenetur.",
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 24,
                            Label = "Eos.",
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 25,
                            Label = "Modi.",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 26,
                            Label = "Impedit.",
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 27,
                            Label = "Quam.",
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 28,
                            Label = "Ut.",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 29,
                            Label = "Excepturi.",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 30,
                            Label = "Dolores.",
                            QuestionId = 15
                        },
                        new
                        {
                            Id = 31,
                            Label = "Est.",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 32,
                            Label = "Id.",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 33,
                            Label = "Consequatur.",
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 34,
                            Label = "Veniam.",
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 35,
                            Label = "Aliquam.",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 36,
                            Label = "Veritatis.",
                            QuestionId = 19
                        },
                        new
                        {
                            Id = 37,
                            Label = "Nam.",
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 38,
                            Label = "Ducimus.",
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 39,
                            Label = "Aliquid.",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 40,
                            Label = "Enim.",
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 41,
                            Label = "Enim.",
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 42,
                            Label = "Alias.",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 43,
                            Label = "Incidunt.",
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 44,
                            Label = "Rerum.",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 45,
                            Label = "Vitae.",
                            QuestionId = 17
                        },
                        new
                        {
                            Id = 46,
                            Label = "Sit.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 47,
                            Label = "Quidem.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 48,
                            Label = "Neque.",
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 49,
                            Label = "Id.",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 50,
                            Label = "Consequuntur.",
                            QuestionId = 4
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.FieldRecord", b =>
                {
                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("CustomAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FieldId", "RecordId");

                    b.HasIndex("RecordId");

                    b.ToTable("FieldRecords");
                });

            modelBuilder.Entity("QuikForm.Entities.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Forms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 3, 15, 51, 19, 312, DateTimeKind.Unspecified).AddTicks(9198),
                            Description = "Iure dolorem qui inventore cum blanditiis fugiat rerum aliquid aliquid. Est excepturi quasi nesciunt omnis in asperiores non iusto. Est voluptatem est eveniet aut eum. Voluptatem ea voluptates est accusamus sunt commodi.",
                            Title = "Nesciunt commodi in delectus tempore.",
                            UpdatedAt = new DateTime(2024, 1, 21, 12, 33, 53, 266, DateTimeKind.Unspecified).AddTicks(5039)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 4, 12, 9, 16, 868, DateTimeKind.Unspecified).AddTicks(3934),
                            Description = "Ut sunt incidunt harum modi tempore officiis optio. Ratione voluptas ut aspernatur occaecati dolor architecto soluta. Est est dicta ad quo ipsa illum aspernatur. Et totam culpa dicta aliquam sapiente inventore in.",
                            Title = "Corrupti facilis dolor aut tenetur.",
                            UpdatedAt = new DateTime(2024, 1, 30, 4, 31, 6, 647, DateTimeKind.Unspecified).AddTicks(6542)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 5, 1, 28, 562, DateTimeKind.Unspecified).AddTicks(5683),
                            Description = "Enim vel quia ratione earum ipsum quidem velit et. Quisquam nihil cupiditate. Ipsum quasi explicabo beatae possimus culpa occaecati perspiciatis et. Quia eos quasi. Non delectus ut voluptates dolor temporibus reprehenderit sit quasi.",
                            Title = "Eum suscipit officiis voluptatem molestiae.",
                            UpdatedAt = new DateTime(2024, 1, 15, 11, 45, 59, 323, DateTimeKind.Unspecified).AddTicks(886)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 19, 7, 31, 145, DateTimeKind.Unspecified).AddTicks(8966),
                            Description = "Aliquam quod consequatur quia consequatur sed aliquam molestias nulla. Et quidem sequi maxime voluptatum reprehenderit laborum nihil sunt repellendus. Molestiae dolor qui et architecto et cum perferendis.",
                            Title = "Provident ipsum ex in voluptatem.",
                            UpdatedAt = new DateTime(2024, 1, 28, 2, 25, 35, 493, DateTimeKind.Unspecified).AddTicks(2675)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 23, 56, 55, 882, DateTimeKind.Unspecified).AddTicks(4869),
                            Description = "Consectetur aut possimus. Aliquid voluptatem quisquam alias et exercitationem voluptatem commodi dolor. Sunt quibusdam ipsam sint perspiciatis sunt explicabo dolorem tempora. Debitis nihil et eaque et. Et dicta nesciunt eligendi libero amet. Illo nihil odit voluptas labore natus at amet.",
                            Title = "Cumque itaque ipsa illum ipsum.",
                            UpdatedAt = new DateTime(2024, 1, 19, 17, 19, 13, 357, DateTimeKind.Unspecified).AddTicks(8229)
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.InputType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("InputTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Text"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Textarea"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Checkbox"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Radio"
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<int?>("InputTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("InputTypeId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FormId = 3,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Impedit numquam vero ratione ipsa."
                        },
                        new
                        {
                            Id = 2,
                            FormId = 3,
                            InputTypeId = 2,
                            IsMandatory = false,
                            Label = "Odio modi quia ut distinctio."
                        },
                        new
                        {
                            Id = 3,
                            FormId = 2,
                            InputTypeId = 3,
                            IsMandatory = false,
                            Label = "Qui exercitationem tempore nostrum nobis."
                        },
                        new
                        {
                            Id = 4,
                            FormId = 1,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Quae aspernatur tenetur reiciendis quaerat."
                        },
                        new
                        {
                            Id = 5,
                            FormId = 4,
                            InputTypeId = 2,
                            IsMandatory = false,
                            Label = "Quibusdam ut voluptatem consectetur accusamus."
                        },
                        new
                        {
                            Id = 6,
                            FormId = 4,
                            InputTypeId = 4,
                            IsMandatory = true,
                            Label = "Nihil et sunt aut exercitationem."
                        },
                        new
                        {
                            Id = 7,
                            FormId = 4,
                            InputTypeId = 2,
                            IsMandatory = true,
                            Label = "Numquam sapiente quia vel temporibus."
                        },
                        new
                        {
                            Id = 8,
                            FormId = 4,
                            InputTypeId = 4,
                            IsMandatory = true,
                            Label = "Iure id earum aut est."
                        },
                        new
                        {
                            Id = 9,
                            FormId = 5,
                            InputTypeId = 3,
                            IsMandatory = false,
                            Label = "Et fuga suscipit aliquid tenetur."
                        },
                        new
                        {
                            Id = 10,
                            FormId = 1,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Non ut sint pariatur exercitationem."
                        },
                        new
                        {
                            Id = 11,
                            FormId = 3,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Rerum omnis quaerat sed dolorem."
                        },
                        new
                        {
                            Id = 12,
                            FormId = 4,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Consequuntur quia harum rerum omnis."
                        },
                        new
                        {
                            Id = 13,
                            FormId = 1,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Dolorem provident eos iure minima."
                        },
                        new
                        {
                            Id = 14,
                            FormId = 5,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Culpa ut eaque voluptates eius."
                        },
                        new
                        {
                            Id = 15,
                            FormId = 3,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Debitis et ut omnis cumque."
                        },
                        new
                        {
                            Id = 16,
                            FormId = 5,
                            InputTypeId = 2,
                            IsMandatory = false,
                            Label = "Consequatur debitis et ipsum rerum."
                        },
                        new
                        {
                            Id = 17,
                            FormId = 3,
                            InputTypeId = 1,
                            IsMandatory = false,
                            Label = "Non quis similique est consequatur."
                        },
                        new
                        {
                            Id = 18,
                            FormId = 2,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Labore voluptatibus quidem voluptatum voluptatum."
                        },
                        new
                        {
                            Id = 19,
                            FormId = 4,
                            InputTypeId = 2,
                            IsMandatory = false,
                            Label = "Aut et facere quisquam magni."
                        },
                        new
                        {
                            Id = 20,
                            FormId = 2,
                            InputTypeId = 2,
                            IsMandatory = false,
                            Label = "Nihil reiciendis voluptatibus nobis voluptatum."
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuikForm.Entities.Field", b =>
                {
                    b.HasOne("QuikForm.Entities.Question", "Question")
                        .WithMany("Fields")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuikForm.Entities.FieldRecord", b =>
                {
                    b.HasOne("QuikForm.Entities.Field", "Field")
                        .WithMany("FieldRecords")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuikForm.Entities.Record", "Record")
                        .WithMany("FieldRecords")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("QuikForm.Entities.Form", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Forms")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("QuikForm.Entities.Question", b =>
                {
                    b.HasOne("QuikForm.Entities.Form", "Form")
                        .WithMany("Questions")
                        .HasForeignKey("FormId");

                    b.HasOne("QuikForm.Entities.InputType", "InputType")
                        .WithMany("Questions")
                        .HasForeignKey("InputTypeId");

                    b.Navigation("Form");

                    b.Navigation("InputType");
                });

            modelBuilder.Entity("QuikForm.Entities.Record", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("QuikForm.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Forms");
                });

            modelBuilder.Entity("QuikForm.Entities.Field", b =>
                {
                    b.Navigation("FieldRecords");
                });

            modelBuilder.Entity("QuikForm.Entities.Form", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuikForm.Entities.InputType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuikForm.Entities.Question", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("QuikForm.Entities.Record", b =>
                {
                    b.Navigation("FieldRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
