// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuikForm.Repositories.Contexts;

#nullable disable

namespace QuikForm.Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240131131225_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuikForm.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("QuikForm.Entities.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Aut.",
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 2,
                            Label = "Error.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            Label = "Inventore.",
                            QuestionId = 19
                        },
                        new
                        {
                            Id = 4,
                            Label = "Placeat.",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 5,
                            Label = "Saepe.",
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 6,
                            Label = "Sit.",
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 7,
                            Label = "Ut.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 8,
                            Label = "Aut.",
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 9,
                            Label = "Est.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 10,
                            Label = "A.",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 11,
                            Label = "Eligendi.",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 12,
                            Label = "Sit.",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 13,
                            Label = "Quis.",
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 14,
                            Label = "Illo.",
                            QuestionId = 17
                        },
                        new
                        {
                            Id = 15,
                            Label = "Velit.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 16,
                            Label = "Et.",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 17,
                            Label = "Quas.",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 18,
                            Label = "Exercitationem.",
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 19,
                            Label = "Doloribus.",
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 20,
                            Label = "Aut.",
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 21,
                            Label = "Repellat.",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 22,
                            Label = "Aliquam.",
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 23,
                            Label = "Sed.",
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 24,
                            Label = "Voluptates.",
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 25,
                            Label = "Sint.",
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 26,
                            Label = "Distinctio.",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 27,
                            Label = "Nemo.",
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 28,
                            Label = "Vitae.",
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 29,
                            Label = "Praesentium.",
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 30,
                            Label = "Et.",
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 31,
                            Label = "Commodi.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 32,
                            Label = "Aliquam.",
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 33,
                            Label = "Quo.",
                            QuestionId = 19
                        },
                        new
                        {
                            Id = 34,
                            Label = "Eligendi.",
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 35,
                            Label = "Temporibus.",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 36,
                            Label = "Dicta.",
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 37,
                            Label = "Repellendus.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 38,
                            Label = "Porro.",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 39,
                            Label = "Dolor.",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 40,
                            Label = "Eaque.",
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 41,
                            Label = "Molestias.",
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 42,
                            Label = "Laborum.",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 43,
                            Label = "Quis.",
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 44,
                            Label = "Dolores.",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 45,
                            Label = "Magnam.",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 46,
                            Label = "Ea.",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 47,
                            Label = "Cumque.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 48,
                            Label = "Ut.",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 49,
                            Label = "Dicta.",
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 50,
                            Label = "Laborum.",
                            QuestionId = 20
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.FieldRecord", b =>
                {
                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("CustomAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FieldId", "RecordId");

                    b.HasIndex("RecordId");

                    b.ToTable("FieldRecords");
                });

            modelBuilder.Entity("QuikForm.Entities.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Forms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 3, 6, 57, 56, 707, DateTimeKind.Unspecified).AddTicks(9738),
                            Description = "Sunt ex recusandae omnis minima id velit vel et. Incidunt velit distinctio omnis quis et. Deleniti ipsum et corporis. Impedit porro tenetur et quo corporis. Eius animi officia recusandae.",
                            Title = "Nihil consequatur atque quos quia.",
                            UpdatedAt = new DateTime(2024, 1, 20, 11, 15, 54, 886, DateTimeKind.Unspecified).AddTicks(5265)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 3, 21, 53, 3, 46, DateTimeKind.Unspecified).AddTicks(5299),
                            Description = "Et expedita magni consequatur distinctio. Dolor expedita nisi magnam. Aut ut ipsum temporibus porro et omnis non eum explicabo. Et minima quis provident vel saepe in quia eum. Officia rerum accusantium sed tenetur provident minima maxime illum impedit. Quo temporibus et natus.",
                            Title = "Ex aut ratione praesentium a.",
                            UpdatedAt = new DateTime(2024, 1, 16, 12, 3, 55, 143, DateTimeKind.Unspecified).AddTicks(9955)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 2, 12, 49, 41, 454, DateTimeKind.Unspecified).AddTicks(2671),
                            Description = "Minus accusamus dolor voluptates quae dignissimos nulla aut. Cum voluptatem est odit autem molestias eum repellendus. Autem possimus dolore sed eos quia accusamus facilis odit illum.",
                            Title = "Nemo expedita autem minus ea.",
                            UpdatedAt = new DateTime(2024, 1, 12, 11, 29, 42, 332, DateTimeKind.Unspecified).AddTicks(1452)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 4, 21, 46, 17, 2, DateTimeKind.Unspecified).AddTicks(8463),
                            Description = "Beatae beatae distinctio et dicta pariatur fugit et. Odit iste iste et enim fugit. Consequatur minima sunt blanditiis vel illum.",
                            Title = "Tempora corrupti voluptates cum laboriosam.",
                            UpdatedAt = new DateTime(2024, 1, 10, 17, 57, 57, 466, DateTimeKind.Unspecified).AddTicks(7705)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 3, 10, 6, 1, 219, DateTimeKind.Unspecified).AddTicks(2348),
                            Description = "Rem sunt molestiae velit rerum iure ut nulla est. Exercitationem iusto blanditiis ut quaerat enim ducimus tempore culpa molestiae. Ea corporis sed aliquam porro aliquid quasi non asperiores. Repudiandae dolor aut rerum voluptas adipisci beatae asperiores.",
                            Title = "Aut rerum rerum blanditiis rerum.",
                            UpdatedAt = new DateTime(2024, 1, 16, 1, 31, 34, 619, DateTimeKind.Unspecified).AddTicks(4286)
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.InputType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Markup")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("InputTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Champs texte",
                            Markup = "text"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Champs paragraphe",
                            Markup = "textarea"
                        },
                        new
                        {
                            Id = 3,
                            Label = "Choix multiples",
                            Markup = "checkbox"
                        },
                        new
                        {
                            Id = 4,
                            Label = "Choix unique",
                            Markup = "radio"
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<int?>("InputTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("InputTypeId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FormId = 3,
                            InputTypeId = 2,
                            IsMandatory = true,
                            Label = "Explicabo saepe modi rerum voluptates."
                        },
                        new
                        {
                            Id = 2,
                            FormId = 2,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Dolor magni magni laboriosam dolor."
                        },
                        new
                        {
                            Id = 3,
                            FormId = 4,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Voluptatibus qui in rerum officia."
                        },
                        new
                        {
                            Id = 4,
                            FormId = 3,
                            InputTypeId = 2,
                            IsMandatory = false,
                            Label = "Rerum ullam quisquam dolorem quae."
                        },
                        new
                        {
                            Id = 5,
                            FormId = 2,
                            InputTypeId = 4,
                            IsMandatory = true,
                            Label = "Aut ut velit praesentium at."
                        },
                        new
                        {
                            Id = 6,
                            FormId = 4,
                            InputTypeId = 3,
                            IsMandatory = false,
                            Label = "Sint quo est officiis aut."
                        },
                        new
                        {
                            Id = 7,
                            FormId = 3,
                            InputTypeId = 3,
                            IsMandatory = true,
                            Label = "Odit numquam qui minus accusamus."
                        },
                        new
                        {
                            Id = 8,
                            FormId = 5,
                            InputTypeId = 4,
                            IsMandatory = true,
                            Label = "Unde voluptatem omnis enim reiciendis."
                        },
                        new
                        {
                            Id = 9,
                            FormId = 1,
                            InputTypeId = 4,
                            IsMandatory = true,
                            Label = "Dolorem voluptas sed laborum quidem."
                        },
                        new
                        {
                            Id = 10,
                            FormId = 5,
                            InputTypeId = 1,
                            IsMandatory = false,
                            Label = "Amet temporibus delectus rerum eius."
                        },
                        new
                        {
                            Id = 11,
                            FormId = 3,
                            InputTypeId = 3,
                            IsMandatory = false,
                            Label = "Laudantium tempore rem dolores rerum."
                        },
                        new
                        {
                            Id = 12,
                            FormId = 2,
                            InputTypeId = 1,
                            IsMandatory = false,
                            Label = "Quod dicta possimus repellat quo."
                        },
                        new
                        {
                            Id = 13,
                            FormId = 5,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Veniam qui recusandae sunt veniam."
                        },
                        new
                        {
                            Id = 14,
                            FormId = 3,
                            InputTypeId = 2,
                            IsMandatory = false,
                            Label = "Quod nemo ad voluptas non."
                        },
                        new
                        {
                            Id = 15,
                            FormId = 2,
                            InputTypeId = 2,
                            IsMandatory = false,
                            Label = "Quibusdam ullam non qui rerum."
                        },
                        new
                        {
                            Id = 16,
                            FormId = 5,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Expedita harum distinctio esse distinctio."
                        },
                        new
                        {
                            Id = 17,
                            FormId = 3,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Quia quis quia dolorum vel."
                        },
                        new
                        {
                            Id = 18,
                            FormId = 4,
                            InputTypeId = 4,
                            IsMandatory = true,
                            Label = "Fugit ad odio fuga dignissimos."
                        },
                        new
                        {
                            Id = 19,
                            FormId = 4,
                            InputTypeId = 3,
                            IsMandatory = false,
                            Label = "Quod ratione voluptatibus modi molestias."
                        },
                        new
                        {
                            Id = 20,
                            FormId = 5,
                            InputTypeId = 2,
                            IsMandatory = true,
                            Label = "Totam quaerat aspernatur voluptate placeat."
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuikForm.Entities.Field", b =>
                {
                    b.HasOne("QuikForm.Entities.Question", "Question")
                        .WithMany("Fields")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuikForm.Entities.FieldRecord", b =>
                {
                    b.HasOne("QuikForm.Entities.Field", "Field")
                        .WithMany("FieldRecords")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuikForm.Entities.Record", "Record")
                        .WithMany("FieldRecords")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("QuikForm.Entities.Form", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Forms")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("QuikForm.Entities.Question", b =>
                {
                    b.HasOne("QuikForm.Entities.Form", "Form")
                        .WithMany("Questions")
                        .HasForeignKey("FormId");

                    b.HasOne("QuikForm.Entities.InputType", "InputType")
                        .WithMany("Questions")
                        .HasForeignKey("InputTypeId");

                    b.Navigation("Form");

                    b.Navigation("InputType");
                });

            modelBuilder.Entity("QuikForm.Entities.Record", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("QuikForm.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Forms");
                });

            modelBuilder.Entity("QuikForm.Entities.Field", b =>
                {
                    b.Navigation("FieldRecords");
                });

            modelBuilder.Entity("QuikForm.Entities.Form", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuikForm.Entities.InputType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuikForm.Entities.Question", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("QuikForm.Entities.Record", b =>
                {
                    b.Navigation("FieldRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
