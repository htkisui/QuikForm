// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuikForm.Repositories.Contexts;

#nullable disable

namespace QuikForm.Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuikForm.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("QuikForm.Entities.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Ducimus.",
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 2,
                            Label = "Deserunt.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            Label = "Tempore.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            Label = "Ut.",
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 5,
                            Label = "Ut.",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 6,
                            Label = "Omnis.",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 7,
                            Label = "Molestiae.",
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 8,
                            Label = "Voluptas.",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 9,
                            Label = "Error.",
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 10,
                            Label = "Non.",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 11,
                            Label = "Quia.",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 12,
                            Label = "Laboriosam.",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 13,
                            Label = "Quia.",
                            QuestionId = 19
                        },
                        new
                        {
                            Id = 14,
                            Label = "Quasi.",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 15,
                            Label = "Similique.",
                            QuestionId = 15
                        },
                        new
                        {
                            Id = 16,
                            Label = "Eum.",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 17,
                            Label = "Libero.",
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 18,
                            Label = "Illum.",
                            QuestionId = 17
                        },
                        new
                        {
                            Id = 19,
                            Label = "Voluptatum.",
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 20,
                            Label = "Odio.",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 21,
                            Label = "A.",
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 22,
                            Label = "Sed.",
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 23,
                            Label = "Qui.",
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 24,
                            Label = "Et.",
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 25,
                            Label = "Sed.",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 26,
                            Label = "Placeat.",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 27,
                            Label = "Dolorem.",
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 28,
                            Label = "Cumque.",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 29,
                            Label = "Error.",
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 30,
                            Label = "Ea.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 31,
                            Label = "Quis.",
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 32,
                            Label = "Labore.",
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 33,
                            Label = "Omnis.",
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 34,
                            Label = "Qui.",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 35,
                            Label = "Exercitationem.",
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 36,
                            Label = "Ipsam.",
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 37,
                            Label = "Nobis.",
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 38,
                            Label = "Vel.",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 39,
                            Label = "Repellendus.",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 40,
                            Label = "Est.",
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 41,
                            Label = "Beatae.",
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 42,
                            Label = "Sed.",
                            QuestionId = 15
                        },
                        new
                        {
                            Id = 43,
                            Label = "Nihil.",
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 44,
                            Label = "Rerum.",
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 45,
                            Label = "Corporis.",
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 46,
                            Label = "Sapiente.",
                            QuestionId = 19
                        },
                        new
                        {
                            Id = 47,
                            Label = "Et.",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 48,
                            Label = "Cupiditate.",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 49,
                            Label = "Adipisci.",
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 50,
                            Label = "Enim.",
                            QuestionId = 18
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.FieldRecord", b =>
                {
                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("CustomAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FieldId", "RecordId");

                    b.HasIndex("RecordId");

                    b.ToTable("FieldRecords");
                });

            modelBuilder.Entity("QuikForm.Entities.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Forms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 4, 19, 15, 10, 221, DateTimeKind.Unspecified).AddTicks(8822),
                            Description = "Eligendi velit qui totam non veritatis iste illum at est. Quidem commodi molestiae consectetur quia. Aut ut cum architecto illum pariatur minima et praesentium explicabo. Numquam quis vero ipsam porro odit.",
                            Title = "Voluptas quasi id libero ab.",
                            UpdatedAt = new DateTime(2024, 1, 19, 0, 38, 58, 669, DateTimeKind.Unspecified).AddTicks(1781)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 4, 2, 40, 1, 599, DateTimeKind.Unspecified).AddTicks(2770),
                            Description = "Ea facere enim et magnam ab molestiae accusantium autem. Quasi laudantium est aut quibusdam corporis voluptatem. Ex ut aliquam ratione et qui ducimus eligendi.",
                            Title = "Aperiam ratione et aperiam repudiandae.",
                            UpdatedAt = new DateTime(2024, 1, 17, 20, 2, 39, 250, DateTimeKind.Unspecified).AddTicks(2439)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 3, 6, 38, 26, 199, DateTimeKind.Unspecified).AddTicks(7878),
                            Description = "Saepe commodi voluptas. Voluptatem voluptate molestiae optio ab non sed aut illum. Ea quod maxime et nihil beatae. Ut et sit eius ut id.",
                            Title = "Dignissimos animi accusamus officiis nesciunt.",
                            UpdatedAt = new DateTime(2024, 1, 18, 4, 12, 53, 338, DateTimeKind.Unspecified).AddTicks(1809)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 2, 8, 54, 39, 965, DateTimeKind.Unspecified).AddTicks(9734),
                            Description = "Sit eos est voluptatem cum doloremque sed. Sit adipisci nobis commodi numquam quae adipisci ut ipsam eum. Culpa et consequatur quo. Sint quidem officiis accusantium quia accusantium.",
                            Title = "Ab iure accusamus ullam eos.",
                            UpdatedAt = new DateTime(2024, 1, 19, 14, 3, 14, 112, DateTimeKind.Unspecified).AddTicks(2411)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 3, 23, 59, 51, 78, DateTimeKind.Unspecified).AddTicks(396),
                            Description = "Deserunt sunt quae vel ut dolores aut voluptas tenetur. Rem nulla voluptas. Velit quibusdam sit quia est consequuntur sed est porro. Ut fuga quis minus inventore aut similique sed incidunt. Officia architecto unde quisquam enim. Quia ea omnis est non ratione.",
                            Title = "Qui veritatis fugiat omnis aut.",
                            UpdatedAt = new DateTime(2024, 1, 26, 15, 17, 54, 119, DateTimeKind.Unspecified).AddTicks(5941)
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.InputType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Markup")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("InputTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Choix unique",
                            Markup = "radio"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Choix multiples",
                            Markup = "checkbox"
                        },
                        new
                        {
                            Id = 3,
                            Label = "Champs texte",
                            Markup = "text"
                        },
                        new
                        {
                            Id = 4,
                            Label = "Champs paragraphe",
                            Markup = "textarea"
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<int?>("InputTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("InputTypeId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FormId = 2,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Provident totam cupiditate assumenda unde."
                        },
                        new
                        {
                            Id = 2,
                            FormId = 3,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Voluptatem quibusdam iusto consectetur distinctio."
                        },
                        new
                        {
                            Id = 3,
                            FormId = 2,
                            InputTypeId = 1,
                            IsMandatory = false,
                            Label = "Laborum est maiores voluptate assumenda."
                        },
                        new
                        {
                            Id = 4,
                            FormId = 2,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Nihil in quis reprehenderit aut."
                        },
                        new
                        {
                            Id = 5,
                            FormId = 4,
                            InputTypeId = 3,
                            IsMandatory = true,
                            Label = "Praesentium esse consequatur dolorem et."
                        },
                        new
                        {
                            Id = 6,
                            FormId = 5,
                            InputTypeId = 2,
                            IsMandatory = true,
                            Label = "Quia qui aliquid error sequi."
                        },
                        new
                        {
                            Id = 7,
                            FormId = 1,
                            InputTypeId = 2,
                            IsMandatory = true,
                            Label = "Iure voluptatem consectetur quaerat nulla."
                        },
                        new
                        {
                            Id = 8,
                            FormId = 1,
                            InputTypeId = 3,
                            IsMandatory = true,
                            Label = "Officiis sed quia praesentium voluptatem."
                        },
                        new
                        {
                            Id = 9,
                            FormId = 1,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Dolorem tenetur non quia quaerat."
                        },
                        new
                        {
                            Id = 10,
                            FormId = 4,
                            InputTypeId = 4,
                            IsMandatory = true,
                            Label = "Nihil occaecati et non magnam."
                        },
                        new
                        {
                            Id = 11,
                            FormId = 2,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Voluptatem qui ut aut dolorum."
                        },
                        new
                        {
                            Id = 12,
                            FormId = 4,
                            InputTypeId = 1,
                            IsMandatory = false,
                            Label = "Rerum dolorem culpa impedit fugiat."
                        },
                        new
                        {
                            Id = 13,
                            FormId = 1,
                            InputTypeId = 3,
                            IsMandatory = true,
                            Label = "Dolores repellendus soluta qui ipsa."
                        },
                        new
                        {
                            Id = 14,
                            FormId = 2,
                            InputTypeId = 2,
                            IsMandatory = true,
                            Label = "Nulla a qui quas dolorum."
                        },
                        new
                        {
                            Id = 15,
                            FormId = 5,
                            InputTypeId = 4,
                            IsMandatory = true,
                            Label = "Quia nam hic eaque perspiciatis."
                        },
                        new
                        {
                            Id = 16,
                            FormId = 5,
                            InputTypeId = 2,
                            IsMandatory = false,
                            Label = "Exercitationem similique non sunt vitae."
                        },
                        new
                        {
                            Id = 17,
                            FormId = 2,
                            InputTypeId = 4,
                            IsMandatory = true,
                            Label = "Laudantium nobis quia sit eum."
                        },
                        new
                        {
                            Id = 18,
                            FormId = 3,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Porro iusto aut nihil sequi."
                        },
                        new
                        {
                            Id = 19,
                            FormId = 3,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Molestiae odit facere quia expedita."
                        },
                        new
                        {
                            Id = 20,
                            FormId = 4,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Exercitationem quisquam voluptas sint quis."
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuikForm.Entities.Field", b =>
                {
                    b.HasOne("QuikForm.Entities.Question", "Question")
                        .WithMany("Fields")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuikForm.Entities.FieldRecord", b =>
                {
                    b.HasOne("QuikForm.Entities.Field", "Field")
                        .WithMany("FieldRecords")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuikForm.Entities.Record", "Record")
                        .WithMany("FieldRecords")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("QuikForm.Entities.Form", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Forms")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("QuikForm.Entities.Question", b =>
                {
                    b.HasOne("QuikForm.Entities.Form", "Form")
                        .WithMany("Questions")
                        .HasForeignKey("FormId");

                    b.HasOne("QuikForm.Entities.InputType", "InputType")
                        .WithMany("Questions")
                        .HasForeignKey("InputTypeId");

                    b.Navigation("Form");

                    b.Navigation("InputType");
                });

            modelBuilder.Entity("QuikForm.Entities.Record", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("QuikForm.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Forms");
                });

            modelBuilder.Entity("QuikForm.Entities.Field", b =>
                {
                    b.Navigation("FieldRecords");
                });

            modelBuilder.Entity("QuikForm.Entities.Form", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuikForm.Entities.InputType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuikForm.Entities.Question", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("QuikForm.Entities.Record", b =>
                {
                    b.Navigation("FieldRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
