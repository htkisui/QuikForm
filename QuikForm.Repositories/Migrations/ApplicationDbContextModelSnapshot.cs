// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuikForm.Repositories.Contexts;

#nullable disable

namespace QuikForm.Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuikForm.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("QuikForm.Entities.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Id.",
                            QuestionId = 17
                        },
                        new
                        {
                            Id = 2,
                            Label = "Rerum.",
                            QuestionId = 17
                        },
                        new
                        {
                            Id = 3,
                            Label = "Sint.",
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 4,
                            Label = "Quia.",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 5,
                            Label = "Sint.",
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 6,
                            Label = "Velit.",
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 7,
                            Label = "Provident.",
                            QuestionId = 17
                        },
                        new
                        {
                            Id = 8,
                            Label = "Ab.",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 9,
                            Label = "Et.",
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 10,
                            Label = "Perferendis.",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 11,
                            Label = "Saepe.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 12,
                            Label = "Et.",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 13,
                            Label = "Ipsum.",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 14,
                            Label = "Deleniti.",
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 15,
                            Label = "Eos.",
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 16,
                            Label = "Necessitatibus.",
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 17,
                            Label = "Provident.",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 18,
                            Label = "Eos.",
                            QuestionId = 17
                        },
                        new
                        {
                            Id = 19,
                            Label = "Odio.",
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 20,
                            Label = "Qui.",
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 21,
                            Label = "Rem.",
                            QuestionId = 19
                        },
                        new
                        {
                            Id = 22,
                            Label = "Fugiat.",
                            QuestionId = 17
                        },
                        new
                        {
                            Id = 23,
                            Label = "Nostrum.",
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 24,
                            Label = "Ratione.",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 25,
                            Label = "Aut.",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 26,
                            Label = "Perferendis.",
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 27,
                            Label = "Accusamus.",
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 28,
                            Label = "Neque.",
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 29,
                            Label = "Sint.",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 30,
                            Label = "Consectetur.",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 31,
                            Label = "Consequatur.",
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 32,
                            Label = "Et.",
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 33,
                            Label = "Ad.",
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 34,
                            Label = "Voluptatem.",
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 35,
                            Label = "Est.",
                            QuestionId = 17
                        },
                        new
                        {
                            Id = 36,
                            Label = "Soluta.",
                            QuestionId = 19
                        },
                        new
                        {
                            Id = 37,
                            Label = "Mollitia.",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 38,
                            Label = "Natus.",
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 39,
                            Label = "Assumenda.",
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 40,
                            Label = "Aliquid.",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 41,
                            Label = "Est.",
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 42,
                            Label = "Blanditiis.",
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 43,
                            Label = "Officiis.",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 44,
                            Label = "Eveniet.",
                            QuestionId = 19
                        },
                        new
                        {
                            Id = 45,
                            Label = "Et.",
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 46,
                            Label = "Reprehenderit.",
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 47,
                            Label = "Sit.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 48,
                            Label = "Et.",
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 49,
                            Label = "Quibusdam.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 50,
                            Label = "Expedita.",
                            QuestionId = 1
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.FieldRecord", b =>
                {
                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("CustomAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FieldId", "RecordId");

                    b.HasIndex("RecordId");

                    b.ToTable("FieldRecords");
                });

            modelBuilder.Entity("QuikForm.Entities.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Forms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 3, 0, 8, 26, 982, DateTimeKind.Unspecified).AddTicks(2522),
                            Description = "Sint ullam laboriosam. Neque distinctio reiciendis ducimus sequi et rerum. Ut provident consequatur.",
                            Title = "Aliquid quisquam nisi repellat quos.",
                            UpdatedAt = new DateTime(2024, 1, 30, 13, 40, 33, 458, DateTimeKind.Unspecified).AddTicks(3402)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 12, 25, 42, 678, DateTimeKind.Unspecified).AddTicks(767),
                            Description = "Vitae voluptates impedit quod aliquid. Modi ea suscipit et consequatur quia nesciunt quos et. Pariatur necessitatibus nam tempore reiciendis voluptas alias. Nam totam accusantium dicta reiciendis aut.",
                            Title = "Vitae nisi dolorem laudantium ea.",
                            UpdatedAt = new DateTime(2024, 1, 31, 15, 6, 55, 614, DateTimeKind.Unspecified).AddTicks(5014)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 15, 33, 55, 957, DateTimeKind.Unspecified).AddTicks(3281),
                            Description = "Facere voluptas reprehenderit sequi vitae illum voluptatem. Eum consequatur quia beatae dolores neque exercitationem iure. Porro laborum excepturi. Sint laboriosam temporibus quia nihil odit. Iusto sint minima iste.",
                            Title = "Sit ut voluptas rerum saepe.",
                            UpdatedAt = new DateTime(2024, 1, 20, 21, 48, 11, 965, DateTimeKind.Unspecified).AddTicks(5235)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 8, 37, 15, 126, DateTimeKind.Unspecified).AddTicks(5403),
                            Description = "Perferendis soluta commodi ea consequatur dolore repudiandae nam unde. Facere quia nam quo est eius. Nostrum repellendus et.",
                            Title = "Repellendus sunt aspernatur qui consequatur.",
                            UpdatedAt = new DateTime(2024, 1, 27, 15, 38, 54, 929, DateTimeKind.Unspecified).AddTicks(1662)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 3, 18, 57, 25, 97, DateTimeKind.Unspecified).AddTicks(1971),
                            Description = "Est beatae in dicta. Nostrum vel et. Quos praesentium at qui modi ratione excepturi accusantium explicabo. Doloremque consequatur facilis.",
                            Title = "Officiis asperiores iste rerum aut.",
                            UpdatedAt = new DateTime(2024, 1, 25, 10, 12, 12, 661, DateTimeKind.Unspecified).AddTicks(2298)
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.InputType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Markup")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("InputTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Choix unique",
                            Markup = "radio"
                        },
                        new
                        {
                            Id = 2,
                            Label = "Choix multiples",
                            Markup = "checkbox"
                        },
                        new
                        {
                            Id = 3,
                            Label = "Champs texte",
                            Markup = "text"
                        },
                        new
                        {
                            Id = 4,
                            Label = "Champs paragraphe",
                            Markup = "textarea"
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<int?>("InputTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("InputTypeId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FormId = 3,
                            InputTypeId = 1,
                            IsMandatory = false,
                            Label = "Veritatis optio fuga id aut."
                        },
                        new
                        {
                            Id = 2,
                            FormId = 4,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Laudantium possimus est dolorem consequatur."
                        },
                        new
                        {
                            Id = 3,
                            FormId = 5,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Ratione quia qui inventore natus."
                        },
                        new
                        {
                            Id = 4,
                            FormId = 2,
                            InputTypeId = 2,
                            IsMandatory = false,
                            Label = "Aut assumenda et ab itaque."
                        },
                        new
                        {
                            Id = 5,
                            FormId = 4,
                            InputTypeId = 4,
                            IsMandatory = true,
                            Label = "Et dolorem esse quo vitae."
                        },
                        new
                        {
                            Id = 6,
                            FormId = 3,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Maiores qui incidunt quibusdam animi."
                        },
                        new
                        {
                            Id = 7,
                            FormId = 2,
                            InputTypeId = 4,
                            IsMandatory = true,
                            Label = "Sunt et corporis culpa et."
                        },
                        new
                        {
                            Id = 8,
                            FormId = 2,
                            InputTypeId = 2,
                            IsMandatory = true,
                            Label = "Et qui dolor ad placeat."
                        },
                        new
                        {
                            Id = 9,
                            FormId = 5,
                            InputTypeId = 1,
                            IsMandatory = false,
                            Label = "Ipsum molestiae amet et accusamus."
                        },
                        new
                        {
                            Id = 10,
                            FormId = 2,
                            InputTypeId = 1,
                            IsMandatory = false,
                            Label = "Earum consequuntur exercitationem saepe eum."
                        },
                        new
                        {
                            Id = 11,
                            FormId = 2,
                            InputTypeId = 2,
                            IsMandatory = true,
                            Label = "Explicabo accusamus quia quisquam earum."
                        },
                        new
                        {
                            Id = 12,
                            FormId = 5,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Repellat voluptate vero qui numquam."
                        },
                        new
                        {
                            Id = 13,
                            FormId = 2,
                            InputTypeId = 2,
                            IsMandatory = false,
                            Label = "Tempore et perspiciatis qui repellendus."
                        },
                        new
                        {
                            Id = 14,
                            FormId = 2,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Harum dolor odit voluptas voluptatum."
                        },
                        new
                        {
                            Id = 15,
                            FormId = 1,
                            InputTypeId = 3,
                            IsMandatory = true,
                            Label = "Quo ut cumque quo maxime."
                        },
                        new
                        {
                            Id = 16,
                            FormId = 3,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Dolorum voluptatibus veritatis aliquid voluptatum."
                        },
                        new
                        {
                            Id = 17,
                            FormId = 1,
                            InputTypeId = 3,
                            IsMandatory = true,
                            Label = "Similique blanditiis quia ea aut."
                        },
                        new
                        {
                            Id = 18,
                            FormId = 2,
                            InputTypeId = 3,
                            IsMandatory = true,
                            Label = "Hic eos voluptate rerum dicta."
                        },
                        new
                        {
                            Id = 19,
                            FormId = 1,
                            InputTypeId = 3,
                            IsMandatory = true,
                            Label = "Porro eos et nostrum ipsam."
                        },
                        new
                        {
                            Id = 20,
                            FormId = 4,
                            InputTypeId = 2,
                            IsMandatory = true,
                            Label = "Deserunt totam perferendis molestias ex."
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuikForm.Entities.Field", b =>
                {
                    b.HasOne("QuikForm.Entities.Question", "Question")
                        .WithMany("Fields")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuikForm.Entities.FieldRecord", b =>
                {
                    b.HasOne("QuikForm.Entities.Field", "Field")
                        .WithMany("FieldRecords")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuikForm.Entities.Record", "Record")
                        .WithMany("FieldRecords")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("QuikForm.Entities.Form", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Forms")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("QuikForm.Entities.Question", b =>
                {
                    b.HasOne("QuikForm.Entities.Form", "Form")
                        .WithMany("Questions")
                        .HasForeignKey("FormId");

                    b.HasOne("QuikForm.Entities.InputType", "InputType")
                        .WithMany("Questions")
                        .HasForeignKey("InputTypeId");

                    b.Navigation("Form");

                    b.Navigation("InputType");
                });

            modelBuilder.Entity("QuikForm.Entities.Record", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("QuikForm.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Forms");
                });

            modelBuilder.Entity("QuikForm.Entities.Field", b =>
                {
                    b.Navigation("FieldRecords");
                });

            modelBuilder.Entity("QuikForm.Entities.Form", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuikForm.Entities.InputType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuikForm.Entities.Question", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("QuikForm.Entities.Record", b =>
                {
                    b.Navigation("FieldRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
