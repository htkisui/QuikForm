// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuikForm.Repositories.Contexts;

#nullable disable

namespace QuikForm.Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240130141958_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuikForm.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("QuikForm.Entities.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "Vitae.",
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 2,
                            Label = "Minima.",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 3,
                            Label = "Quo.",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 4,
                            Label = "Sit.",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 5,
                            Label = "Nesciunt.",
                            QuestionId = 15
                        },
                        new
                        {
                            Id = 6,
                            Label = "Cupiditate.",
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 7,
                            Label = "Sint.",
                            QuestionId = 17
                        },
                        new
                        {
                            Id = 8,
                            Label = "Laboriosam.",
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 9,
                            Label = "Debitis.",
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 10,
                            Label = "Fugiat.",
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 11,
                            Label = "Omnis.",
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 12,
                            Label = "Aut.",
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 13,
                            Label = "Quisquam.",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 14,
                            Label = "Inventore.",
                            QuestionId = 19
                        },
                        new
                        {
                            Id = 15,
                            Label = "Harum.",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 16,
                            Label = "Provident.",
                            QuestionId = 15
                        },
                        new
                        {
                            Id = 17,
                            Label = "Et.",
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 18,
                            Label = "Saepe.",
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 19,
                            Label = "Velit.",
                            QuestionId = 12
                        },
                        new
                        {
                            Id = 20,
                            Label = "Voluptatibus.",
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 21,
                            Label = "Voluptate.",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 22,
                            Label = "Officiis.",
                            QuestionId = 8
                        },
                        new
                        {
                            Id = 23,
                            Label = "Corporis.",
                            QuestionId = 20
                        },
                        new
                        {
                            Id = 24,
                            Label = "Perspiciatis.",
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 25,
                            Label = "Veritatis.",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 26,
                            Label = "Dolorem.",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 27,
                            Label = "Nihil.",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 28,
                            Label = "Recusandae.",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 29,
                            Label = "Qui.",
                            QuestionId = 15
                        },
                        new
                        {
                            Id = 30,
                            Label = "Vel.",
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 31,
                            Label = "Vitae.",
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 32,
                            Label = "Omnis.",
                            QuestionId = 14
                        },
                        new
                        {
                            Id = 33,
                            Label = "Et.",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 34,
                            Label = "Unde.",
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 35,
                            Label = "Quasi.",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 36,
                            Label = "Aspernatur.",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 37,
                            Label = "Voluptatem.",
                            QuestionId = 17
                        },
                        new
                        {
                            Id = 38,
                            Label = "Sed.",
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 39,
                            Label = "Ad.",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 40,
                            Label = "Non.",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 41,
                            Label = "Qui.",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 42,
                            Label = "Dignissimos.",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 43,
                            Label = "Cum.",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 44,
                            Label = "Est.",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 45,
                            Label = "Qui.",
                            QuestionId = 18
                        },
                        new
                        {
                            Id = 46,
                            Label = "Et.",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 47,
                            Label = "Sed.",
                            QuestionId = 13
                        },
                        new
                        {
                            Id = 48,
                            Label = "Odio.",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 49,
                            Label = "Reprehenderit.",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 50,
                            Label = "Libero.",
                            QuestionId = 2
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.FieldRecord", b =>
                {
                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("CustomAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FieldId", "RecordId");

                    b.HasIndex("RecordId");

                    b.ToTable("FieldRecords");
                });

            modelBuilder.Entity("QuikForm.Entities.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Forms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 2, 10, 8, 36, 86, DateTimeKind.Unspecified).AddTicks(8498),
                            Description = "Vel consectetur enim aut tempore velit harum sint iste. Alias odit quibusdam est reprehenderit. Laboriosam veniam dolores veniam natus autem.",
                            Title = "Nemo consectetur eveniet molestiae rerum.",
                            UpdatedAt = new DateTime(2024, 1, 16, 21, 46, 1, 739, DateTimeKind.Unspecified).AddTicks(9903)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 4, 11, 57, 19, 301, DateTimeKind.Unspecified).AddTicks(7662),
                            Description = "Quidem odio vel est quae tenetur minus possimus. Officiis aut voluptatem corrupti deserunt. Corrupti minima illo.",
                            Title = "Corrupti deleniti quo laboriosam tempora.",
                            UpdatedAt = new DateTime(2024, 1, 22, 12, 19, 34, 552, DateTimeKind.Unspecified).AddTicks(785)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 4, 21, 45, 38, 820, DateTimeKind.Unspecified).AddTicks(8714),
                            Description = "Quaerat sunt voluptatem asperiores tempora laboriosam fugit dolorem. Quam fugiat quis dicta deserunt tenetur atque. Dolores magnam accusamus ipsa nam perferendis qui. Id blanditiis corrupti quibusdam odio maxime perferendis. Ut provident dolorem atque aliquam cupiditate. Vitae eveniet omnis et corporis.",
                            Title = "Accusamus sunt quia unde ut.",
                            UpdatedAt = new DateTime(2024, 1, 20, 23, 51, 22, 577, DateTimeKind.Unspecified).AddTicks(9071)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 3, 16, 40, 10, 233, DateTimeKind.Unspecified).AddTicks(549),
                            Description = "Dignissimos occaecati accusamus eligendi. Et ullam mollitia debitis id et quia occaecati qui. Ducimus aut odit incidunt est ut voluptatem odio quaerat deleniti. Praesentium odio sed dolorem quibusdam qui commodi sint a. Dolores iste ut quam quisquam eaque distinctio. In dicta commodi.",
                            Title = "Velit et dolores voluptatem nihil.",
                            UpdatedAt = new DateTime(2024, 1, 12, 8, 15, 16, 190, DateTimeKind.Unspecified).AddTicks(2421)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 3, 9, 33, 16, 871, DateTimeKind.Unspecified).AddTicks(548),
                            Description = "Aut et pariatur quae sed vero nesciunt maiores. Rerum minima autem voluptas commodi quam voluptatibus. Qui et temporibus necessitatibus.",
                            Title = "Id fugit velit distinctio at.",
                            UpdatedAt = new DateTime(2024, 1, 17, 3, 11, 35, 735, DateTimeKind.Unspecified).AddTicks(953)
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.InputType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("InputTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Text"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Textarea"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Checkbox"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Radio"
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<int?>("InputTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("InputTypeId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FormId = 2,
                            InputTypeId = 2,
                            IsMandatory = true,
                            Label = "Repellat esse at ut eaque."
                        },
                        new
                        {
                            Id = 2,
                            FormId = 4,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Veniam quidem tempore facilis eaque."
                        },
                        new
                        {
                            Id = 3,
                            FormId = 1,
                            InputTypeId = 4,
                            IsMandatory = true,
                            Label = "Ducimus vel cumque earum aut."
                        },
                        new
                        {
                            Id = 4,
                            FormId = 1,
                            InputTypeId = 3,
                            IsMandatory = false,
                            Label = "Rerum et in et ea."
                        },
                        new
                        {
                            Id = 5,
                            FormId = 1,
                            InputTypeId = 3,
                            IsMandatory = true,
                            Label = "A omnis quasi deserunt eligendi."
                        },
                        new
                        {
                            Id = 6,
                            FormId = 1,
                            InputTypeId = 2,
                            IsMandatory = true,
                            Label = "Dolor laborum accusantium sit illum."
                        },
                        new
                        {
                            Id = 7,
                            FormId = 5,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Praesentium accusantium consequatur omnis sequi."
                        },
                        new
                        {
                            Id = 8,
                            FormId = 3,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Molestias excepturi et tempora ea."
                        },
                        new
                        {
                            Id = 9,
                            FormId = 5,
                            InputTypeId = 2,
                            IsMandatory = true,
                            Label = "Quo consectetur est sunt harum."
                        },
                        new
                        {
                            Id = 10,
                            FormId = 1,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Porro porro debitis cupiditate autem."
                        },
                        new
                        {
                            Id = 11,
                            FormId = 4,
                            InputTypeId = 4,
                            IsMandatory = true,
                            Label = "Sed ab error ullam neque."
                        },
                        new
                        {
                            Id = 12,
                            FormId = 4,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Amet beatae aperiam et nostrum."
                        },
                        new
                        {
                            Id = 13,
                            FormId = 2,
                            InputTypeId = 2,
                            IsMandatory = false,
                            Label = "Dolorem est magnam aut excepturi."
                        },
                        new
                        {
                            Id = 14,
                            FormId = 5,
                            InputTypeId = 4,
                            IsMandatory = false,
                            Label = "Suscipit eveniet repellendus et eos."
                        },
                        new
                        {
                            Id = 15,
                            FormId = 3,
                            InputTypeId = 3,
                            IsMandatory = true,
                            Label = "Qui quis delectus magni reprehenderit."
                        },
                        new
                        {
                            Id = 16,
                            FormId = 4,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Deserunt et sit ducimus architecto."
                        },
                        new
                        {
                            Id = 17,
                            FormId = 5,
                            InputTypeId = 2,
                            IsMandatory = true,
                            Label = "Quae molestiae vero officiis quis."
                        },
                        new
                        {
                            Id = 18,
                            FormId = 1,
                            InputTypeId = 1,
                            IsMandatory = true,
                            Label = "Ea beatae in earum vero."
                        },
                        new
                        {
                            Id = 19,
                            FormId = 2,
                            InputTypeId = 1,
                            IsMandatory = false,
                            Label = "Officiis ut doloremque labore dolore."
                        },
                        new
                        {
                            Id = 20,
                            FormId = 5,
                            InputTypeId = 2,
                            IsMandatory = false,
                            Label = "Blanditiis voluptatem ex distinctio et."
                        });
                });

            modelBuilder.Entity("QuikForm.Entities.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuikForm.Entities.Field", b =>
                {
                    b.HasOne("QuikForm.Entities.Question", "Question")
                        .WithMany("Fields")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuikForm.Entities.FieldRecord", b =>
                {
                    b.HasOne("QuikForm.Entities.Field", "Field")
                        .WithMany("FieldRecords")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuikForm.Entities.Record", "Record")
                        .WithMany("FieldRecords")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("QuikForm.Entities.Form", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Forms")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("QuikForm.Entities.Question", b =>
                {
                    b.HasOne("QuikForm.Entities.Form", "Form")
                        .WithMany("Questions")
                        .HasForeignKey("FormId");

                    b.HasOne("QuikForm.Entities.InputType", "InputType")
                        .WithMany("Questions")
                        .HasForeignKey("InputTypeId");

                    b.Navigation("Form");

                    b.Navigation("InputType");
                });

            modelBuilder.Entity("QuikForm.Entities.Record", b =>
                {
                    b.HasOne("QuikForm.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("QuikForm.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Forms");
                });

            modelBuilder.Entity("QuikForm.Entities.Field", b =>
                {
                    b.Navigation("FieldRecords");
                });

            modelBuilder.Entity("QuikForm.Entities.Form", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuikForm.Entities.InputType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuikForm.Entities.Question", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("QuikForm.Entities.Record", b =>
                {
                    b.Navigation("FieldRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
